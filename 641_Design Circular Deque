class MyCircularDeque {
    private int[] queue;
    private int head;
    private int tail;
    private int capacity;
    private int size;

    /** Initialize your data structure here. Set the size of the deque to be k. */
    public MyCircularDeque(int k) {
        this.queue = new int[k];
        head = 0;
        size = 0;
        tail = 0;
        capacity = k;
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    public boolean insertFront(int value) {
        if(capacity == size)
            return false;
        // this.queue[this.head] = value;
        this.head = (this.head - 1 + this.capacity) % this.capacity;
        this.queue[this.head] = value;
        this.size += 1;
        return true;
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    public boolean insertLast(int value) {
        if(capacity == size)
            return false;
        this.queue[this.tail] = value;
        this.tail = (this.tail + 1 + this.capacity) % this.capacity;
        this.size += 1;
        return true;
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    public boolean deleteFront() {
        if(size == 0)
            return false;
        this.head = (this.head + 1 + this.capacity) % this.capacity;
        this.size -= 1;
        return true; 
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    public boolean deleteLast() {
        if(size == 0)
            return false;
        this.tail = (this.tail - 1 + this.capacity) % this.capacity;
        this.size -= 1;
        return true; 
    }
    
    /** Get the front item from the deque. */
    public int getFront() {
        if(size == 0) return -1;
        return (this.queue[this.head]);
    }
    
    /** Get the last item from the deque. */
    public int getRear() {
        if(size == 0) return -1;
        return (this.queue[(this.tail - 1 + this.capacity) % this.capacity]);
    }
    
    /** Checks whether the circular deque is empty or not. */
    public boolean isEmpty() {
        return(size == 0);
    }
    
    /** Checks whether the circular deque is full or not. */
    public boolean isFull() {
        return(size == capacity);
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */
 
 /**
 对于一个list，head永远指向第一个元素，tail指向最后一个元素的下一个位置。所以在添加的时候head要先向前移动，然后赋值；tail要先赋值，然后再向后移动。
 返回最后一个值的时候要返回tail-1。
 为了防止+1溢出，要对capacity取mod，为了防止-1得到负数，要加一个capacity，然后再mod
 */
