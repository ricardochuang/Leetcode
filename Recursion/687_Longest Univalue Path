/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int res = 0;
    public int longestUnivaluePath(TreeNode root) {
        findmax(root);
        return res;
    }
    public int findmax(TreeNode root){
        if(root == null) return 0;
        int leftcount = findmax(root.left);
        int rightcount = findmax(root.right);
        int left = 0, right = 0;
        if(root.left != null && root.left.val == root.val) left = leftcount + 1;
        if(root.right != null && root.right.val == root.val) right = rightcount + 1;
        res = Math.max(res, left + right);
        return Math.max(left, right);
    }
}

/**
站在root的位置上考虑：
返回值当root啥也没有的时候应该返回一个0.
然后我需要知道左子树最长是多少，右子树最长是多少。
如果左子树的数值跟我一样，就可以+1，右子树同理。
最后我要的值应该是之前已经确定的值和左+右的和。
而每一次的返回值只能返回单侧的。
*/
